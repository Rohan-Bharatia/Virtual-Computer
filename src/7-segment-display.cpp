#pragma region LICENSE

// MIT License
// 
// Copyright (c) 2024 Rohan Bharatia

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma endregion LICENSE

#pragma once

#ifndef _7_SEGMENT_DISPLAY_cpp_
#define _7_SEGMENT_DISPLAY_cpp_

// std
#include <iostream>

#include "include/7-segment-display.hpp"
#include "include/gate.hpp"
#include "include/cpu/circuit.hpp"

Gate gate;
Circuit circuit;

int Display::m_display(bool sgn, bool t, bool rt, bool rb, bool b, bool lb, bool lt, bool m)
{
    int character;

    if(t && rt && rb && b && lb && lt && !m)
        character = 0;
    
    else if(!t && !rt && !rb && !b && lb && lt && !m)
        character = 1;
    
    else if(t && !rt && rb && b && !lb && lt && m)
        character = 2;

    else if(t && !rt && !rb && b && lb && lt && m)
        character = 3;
    
    else if(!t && rt && rb && b && !lb && lt && m)
        character = 4;
    
    else if(t && rt && !rb && b && lb && !lt && m)
        character = 5;
    
    else if(t && !rt && rb && b && lb && lt && m)
        character = 6;
    
    else if(t && !rt && !rb && !b && lb && lt && !m)
        character = 7;
    
    else if(t && rt && rb && b && lb && lt && m)
        character = 8;
    
    else if(t && rt && rb && b && !lb && lt && m)
        character = 9;
    
    else
    {
        std::cerr << "Not a recognized character, available characters include: Â±{0, 1, 2, 3, 4, 5, 6, 7, 8, or 9}" << std::endl;

        character = 0;
    }
        
    if(sgn && character != 0)
        character *= -1;
    
    std::cout << character;

    return character;
}

int Display::display1(bool a, bool b, bool c, bool d)
{
    return m_display(false, gate.OR(gate.XOR(a, c), gate.XOR(gate.NAND(b, gate.NOT(c)), d)),
                            gate.NAND(gate.XOR(gate.NAND(b, gate.NOT(c)), d), b),
                            gate.OR(gate.OR(b, gate.NOT(c)), d),
                            gate.AND(gate.OR(gate.XOR(a, c), gate.XOR(gate.NAND(b, gate.NOT(c)), d)), gate.OR(gate.XOR(gate.NAND(b, gate.NOT(c)), d), gate.XOR(b, gate.XOR(a, c)))),
                            gate.AND(gate.XOR(gate.NAND(b, gate.NOT(c)), d), gate.NAND(b, gate.NOT(c))),
                            gate.AND(gate.OR(b, gate.NOT(c)), gate.XOR(b, gate.XOR(a, c))),
                            gate.AND(gate.OR(gate.XOR(gate.NAND(b, gate.NOT(c)), d), gate.XOR(b, gate.XOR(a, c))), gate.OR(b, gate.XOR(a, c)))
                    );
}

std::array<bool, 4> Display::dabble(bool a, bool b, bool c, bool d)
{
    return                                                                              \
    {
        gate.NOR(gate.NOR(gate.XOR(a, d), gate.XOR(a, c)), gate.NOR(a, b)),
        gate.NOR(gate.OR(gate.NOR(a, b), gate.XOR(a, d)), c),
        gate.AND(gate.OR(gate.NOR(a, b), gate.XOR(a, d)), gate.XOR(a, c)),
        gate.XOR(gate.NOR(gate.NOR(gate.XOR(a, d), gate.XOR(a, c)), gate.NOR(a, b)), d)
    };
}

std::array<bool, 12> Display::double_dabble(std::array<bool, 8> d)
{
    return
    {
        false, false,
        dabble(false, dabble(false, d[0], d[1], d[2])[0], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[0], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[0])[0],
        dabble(dabble(false, dabble(false, d[0], d[1], d[2])[0], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[0], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[0])[0], dabble(false, dabble(false, d[0], d[1], d[2])[0], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[0], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[0])[1], dabble(false, dabble(false, d[0], d[1], d[2])[0], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[0], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[0])[2], dabble(dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[1], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[2], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[3], d[5])[3])[0],
        dabble(dabble(false, dabble(false, d[0], d[1], d[2])[0], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[0], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[0])[0], dabble(false, dabble(false, d[0], d[1], d[2])[0], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[0], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[0])[1], dabble(false, dabble(false, d[0], d[1], d[2])[0], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[0], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[0])[2], dabble(dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[1], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[2], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[3], d[5])[3])[1],
        dabble(dabble(false, dabble(false, d[0], d[1], d[2])[0], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[0], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[0])[0], dabble(false, dabble(false, d[0], d[1], d[2])[0], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[0], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[0])[1], dabble(false, dabble(false, d[0], d[1], d[2])[0], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[0], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[0])[2], dabble(dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[1], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[2], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[3], d[5])[3])[2],
        dabble(dabble(false, dabble(false, d[0], d[1], d[2])[0], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[0], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[0])[0], dabble(false, dabble(false, d[0], d[1], d[2])[0], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[0], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[0])[1], dabble(false, dabble(false, d[0], d[1], d[2])[0], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[0], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[0])[2], dabble(dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[1], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[2], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[3], d[5])[3])[3],
        dabble(dabble(dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[1], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[2], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[3], d[5])[1], dabble(dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[1], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[2], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[3], d[5])[2], dabble(dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[1], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[2], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[3], d[5])[3], d[6])[0],
        dabble(dabble(dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[1], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[2], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[3], d[5])[1], dabble(dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[1], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[2], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[3], d[5])[2], dabble(dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[1], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[2], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[3], d[5])[3], d[6])[1],
        dabble(dabble(dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[1], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[2], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[3], d[5])[1], dabble(dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[1], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[2], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[3], d[5])[2], dabble(dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[1], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[2], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[3], d[5])[3], d[6])[2],
        dabble(dabble(dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[1], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[2], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[3], d[5])[1], dabble(dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[1], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[2], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[3], d[5])[2], dabble(dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[1], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[2], dabble(dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[1], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[2], dabble(dabble(false, d[0], d[1], d[2])[1], dabble(false, d[0], d[1], d[2])[2], dabble(false, d[0], d[1], d[2])[3], d[3])[3], d[4])[3], d[5])[3], d[6])[3],
        d[6]
    };
}

int Display::display3(bool a, bool b, bool c, bool d, bool e, bool f, bool g, bool h)
{
    return display1(double_dabble({a, b, c, d, e, f, g, h})[0], double_dabble({a, b, c, d, e, f, g, h})[1], double_dabble({a, b, c, d, e, f, g, h})[2], double_dabble({a, b, c, d, e, f, g, h})[3]) + \
           display1(double_dabble({a, b, c, d, e, f, g, h})[4], double_dabble({a, b, c, d, e, f, g, h})[5], double_dabble({a, b, c, d, e, f, g, h})[6], double_dabble({a, b, c, d, e, f, g, h})[7]) + \
           display1(double_dabble({a, b, c, d, e, f, g, h})[8], double_dabble({a, b, c, d, e, f, g, h})[8], double_dabble({a, b, c, d, e, f, g, h})[10],double_dabble({a, b, c, d, e, f, g, h})[11]) + \
           display1(double_dabble({a, b, c, d, e, f, g, h})[12], double_dabble({a, b, c, d, e, f, g, h})[13], double_dabble({a, b, c, d, e, f, g, h})[14], double_dabble({a, b, c, d, e, f, g, h})[15]);
}

#endif // _7_SEGMENT_DISPLAY_cpp_